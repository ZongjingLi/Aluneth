[18 05:17:53 25@main.py:Main] start the train_ccsp_rcc8. 
[18 05:17:53 26@main.py:Main] domain:
  RCC8
types:
  state - vector[float,['3']]
  region - vector[float,['3']]
predicates:
  get_region:['?x-state'] -> region
  disconnected:['?x-state', '?y-state'] -> boolean
  externally_connected:['?x-state', '?y-state'] -> boolean
  partial_overlap:['?x-state', '?y-state'] -> boolean
  equal:['?x-state', '?y-state'] -> boolean
  tangential_proper_part:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part:['?x-state', '?y-state'] -> boolean
  tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
actions:
{}
[19 08:17:02 25@main.py:Main] start the train_ccsp_rcc8. 
[19 08:17:02 26@main.py:Main] domain:
  RCC8
types:
  state - vector[float,['3']]
  region - vector[float,['3']]
predicates:
  get_region:['?x-state'] -> region
  disconnected:['?x-state', '?y-state'] -> boolean
  externally_connected:['?x-state', '?y-state'] -> boolean
  partial_overlap:['?x-state', '?y-state'] -> boolean
  equal:['?x-state', '?y-state'] -> boolean
  tangential_proper_part:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part:['?x-state', '?y-state'] -> boolean
  tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
actions:
{}
[19 08:41:03 25@main.py:Main] start the train_ccsp_rcc8. 
[19 08:41:03 26@main.py:Main] domain:
  RCC8
types:
  state - vector[float,['3']]
  region - vector[float,['3']]
predicates:
  get_region:['?x-state'] -> region
  disconnected:['?x-state', '?y-state'] -> boolean
  externally_connected:['?x-state', '?y-state'] -> boolean
  partial_overlap:['?x-state', '?y-state'] -> boolean
  equal:['?x-state', '?y-state'] -> boolean
  tangential_proper_part:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part:['?x-state', '?y-state'] -> boolean
  tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
actions:
{}
[19 08:45:26 26@main.py:Main] start the train_ccsp_rcc8. 
[19 08:45:26 27@main.py:Main] domain:
  RCC8
types:
  state - vector[float,['3']]
  region - vector[float,['3']]
predicates:
  get_region:['?x-state'] -> region
  disconnected:['?x-state', '?y-state'] -> boolean
  externally_connected:['?x-state', '?y-state'] -> boolean
  partial_overlap:['?x-state', '?y-state'] -> boolean
  equal:['?x-state', '?y-state'] -> boolean
  tangential_proper_part:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part:['?x-state', '?y-state'] -> boolean
  tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
actions:
{}
[19 08:47:25 26@main.py:Main] start the train_ccsp_rcc8. 
[19 08:47:25 27@main.py:Main] domain:
  RCC8
types:
  state - vector[float,['3']]
  region - vector[float,['3']]
predicates:
  get_region:['?x-state'] -> region
  disconnected:['?x-state', '?y-state'] -> boolean
  externally_connected:['?x-state', '?y-state'] -> boolean
  partial_overlap:['?x-state', '?y-state'] -> boolean
  equal:['?x-state', '?y-state'] -> boolean
  tangential_proper_part:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part:['?x-state', '?y-state'] -> boolean
  tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
actions:
{}
[19 09:02:02 26@main.py:Main] start the train_ccsp_rcc8. 
[19 09:02:02 27@main.py:Main] domain:
  RCC8
types:
  state - vector[float,['3']]
  region - vector[float,['3']]
predicates:
  get_region:['?x-state'] -> region
  disconnected:['?x-state', '?y-state'] -> boolean
  externally_connected:['?x-state', '?y-state'] -> boolean
  partial_overlap:['?x-state', '?y-state'] -> boolean
  equal:['?x-state', '?y-state'] -> boolean
  tangential_proper_part:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part:['?x-state', '?y-state'] -> boolean
  tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
actions:
{}
[19 09:36:51 26@main.py:Main] start the train_ccsp_rcc8. 
[19 09:36:51 27@main.py:Main] domain:
  RCC8
types:
  state - vector[float,['3']]
  region - vector[float,['3']]
predicates:
  get_region:['?x-state'] -> region
  disconnected:['?x-state', '?y-state'] -> boolean
  externally_connected:['?x-state', '?y-state'] -> boolean
  partial_overlap:['?x-state', '?y-state'] -> boolean
  equal:['?x-state', '?y-state'] -> boolean
  tangential_proper_part:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part:['?x-state', '?y-state'] -> boolean
  tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
  non_tangential_proper_part_inverse:['?x-state', '?y-state'] -> boolean
actions:
{}
